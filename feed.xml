<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://panyu101.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://panyu101.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-21T20:45:16+00:00</updated><id>https://panyu101.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. Thanks to bogoli </subtitle><entry><title type="html">EKS service account setup</title><link href="https://panyu101.github.io/blog/2025/eks-serviceaccount-setup/" rel="alternate" type="text/html" title="EKS service account setup"/><published>2025-03-14T08:55:00+00:00</published><updated>2025-03-14T08:55:00+00:00</updated><id>https://panyu101.github.io/blog/2025/eks-serviceaccount-setup</id><content type="html" xml:base="https://panyu101.github.io/blog/2025/eks-serviceaccount-setup/"><![CDATA[<p>When the pod running under AWS EKS, if it needs to use the resouce at AWS, then the service account is required to set up.<br/> The following is a sample of calling the module to set this service account called “ds-graph” up. It is usually in file: service-accounts.tf</p> <div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="s2">"eks_serviceaccount_ds_graph"</span> <span class="p">{</span>
  <span class="nx">source</span>  <span class="o">=</span> <span class="s2">"app.terraform.io/company-profiles/eks-serviceaccount-iam/aws"</span>
  <span class="nx">version</span> <span class="o">=</span> <span class="s2">"1.1.0"</span>

  <span class="nx">cluster_name</span> <span class="o">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">cluster_name</span>
  <span class="nx">region</span>       <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_region</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">name</span>
  <span class="nx">namespace</span>    <span class="o">=</span> <span class="s2">"qubed"</span>

  <span class="nx">service_account_name</span> <span class="o">=</span> <span class="s2">"ds-graph"</span>
  <span class="nx">role_name</span>    <span class="o">=</span> <span class="s2">"ds-graph-</span><span class="p">${</span><span class="kd">var</span><span class="p">.</span><span class="nx">environment</span><span class="p">}</span><span class="s2">"</span>

  <span class="nx">role_policy_arns</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">neptune_full_access</span> <span class="o">=</span> <span class="s2">"arn:aws:iam::aws:policy/NeptuneFullAccess"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>Before</strong> you call the module, the provider should be added somewhere first, like this:</p> <div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">provider</span> <span class="s2">"kubernetes"</span> <span class="p">{</span>
  <span class="nx">host</span>                   <span class="o">=</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_eks_cluster</span><span class="p">.</span><span class="nx">qubed</span><span class="p">.</span><span class="nx">endpoint</span>
  <span class="nx">cluster_ca_certificate</span> <span class="o">=</span> <span class="nx">base64decode</span><span class="p">(</span><span class="k">data</span><span class="p">.</span><span class="nx">aws_eks_cluster</span><span class="p">.</span><span class="nx">qubed</span><span class="p">.</span><span class="nx">certificate_authority</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="k">data</span><span class="p">)</span>
  <span class="nx">exec</span> <span class="p">{</span>
    <span class="nx">api_version</span> <span class="o">=</span> <span class="s2">"client.authentication.k8s.io/v1beta1"</span>
    <span class="nx">args</span>        <span class="o">=</span> <span class="p">[</span><span class="s2">"eks"</span><span class="p">,</span> <span class="s2">"get-token"</span><span class="p">,</span> <span class="s2">"--cluster-name"</span><span class="p">,</span> <span class="k">data</span><span class="p">.</span><span class="nx">aws_eks_cluster</span><span class="p">.</span><span class="nx">qubed</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span>
    <span class="nx">command</span>     <span class="o">=</span> <span class="s2">"aws"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>Usage:</strong> the very <strong>last line</strong> uses the service account defined.</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span> <span class="s">...</span>
<span class="na">processes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">/home/myuser/.local/bin/gunicorn"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-w"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">4"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-b"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">0.0.0.0:3000"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">main:app"</span><span class="pi">]</span>
    <span class="na">cpuRequest</span><span class="pi">:</span> <span class="s">1000m</span>
    <span class="na">maxReplicas</span><span class="pi">:</span> <span class="m">2</span>
    <span class="na">minReplicas</span><span class="pi">:</span> <span class="m">1</span>
    <span class="na">targetCPUUtilizationPercentage</span><span class="pi">:</span> <span class="m">60</span>
    <span class="na">targetMemoryUtilizationPercentage</span><span class="pi">:</span> <span class="s">70</span>       
    <span class="na">envSpecific</span><span class="pi">:</span>
      <span class="na">demo</span><span class="pi">:</span>
        <span class="na">hostname</span><span class="pi">:</span> <span class="s">qubed-ds-graph.demo.qubed.ai</span>
        <span class="na">memoryRequest</span><span class="pi">:</span> <span class="s">512Mi</span>
      <span class="na">prod</span><span class="pi">:</span>
        <span class="na">hostname</span><span class="pi">:</span> <span class="s">qubed-ds-graph.prod.qubed.ai</span>
        <span class="na">memoryRequest</span><span class="pi">:</span> <span class="s">512Mi</span>
<span class="na">serviceAccountName</span><span class="pi">:</span> <span class="s">ds-graph</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="k8s"/><category term="apan"/><category term="tech"/><summary type="html"><![CDATA[EKS service account setup]]></summary></entry><entry><title type="html">Install direnv in Alpine</title><link href="https://panyu101.github.io/blog/2025/direnv/" rel="alternate" type="text/html" title="Install direnv in Alpine"/><published>2025-03-10T08:15:00+00:00</published><updated>2025-03-10T08:15:00+00:00</updated><id>https://panyu101.github.io/blog/2025/direnv</id><content type="html" xml:base="https://panyu101.github.io/blog/2025/direnv/"><![CDATA[<p>Small application, direnv, is very convenient. You can set it up, then add .envrc to each directory to save time to export required variables manually.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install bash, since the default shell in Alpine is NOT bach</span>
apk add bash

<span class="c"># change the user shell from sh to bash in /etc/passwd file</span>
root:x:0:0:root:/root:/bin/bash

<span class="c"># install direnv binary</span>
curl <span class="nt">-sfL</span> https://direnv.net/install.sh | bash

<span class="c"># add this line in .profile</span>
<span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>direnv hook bash<span class="si">)</span><span class="s2">"</span>

</code></pre></div></div> <p>Add .envrc to any directory which need to set the environment up.<br/> sample of this like:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

git config user.email <span class="s2">"dxxxx_pxx@yahoo.com"</span>
git config user.name <span class="s2">"panyu101"</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="alpine"/><category term="apan"/><category term="tech"/><summary type="html"><![CDATA[Install direnv in Alpine]]></summary></entry><entry><title type="html">Windows powershell profile</title><link href="https://panyu101.github.io/blog/2025/windows-powershell-profile/" rel="alternate" type="text/html" title="Windows powershell profile"/><published>2025-03-08T16:45:00+00:00</published><updated>2025-03-08T16:45:00+00:00</updated><id>https://panyu101.github.io/blog/2025/windows-powershell-profile</id><content type="html" xml:base="https://panyu101.github.io/blog/2025/windows-powershell-profile/"><![CDATA[<p>Windows powershell profile locates at:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">C:\Users\</span><span class="nv">$USER</span><span class="nx">\Documents\WindowsPowerShell</span><span class="w">
</span></code></pre></div></div> <p>The name of the file should be <strong>Microsoft.PowerShell_profile.ps1</strong></p> <p>Here is one example of this:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># BEFORE run this ps1 script, you need to run this as administrator</span><span class="w">
</span><span class="c"># Set-ExecutionPolicy Unrestricted</span><span class="w">
</span><span class="n">Set-PSReadLineKeyHandler</span><span class="w"> </span><span class="nt">-Chord</span><span class="w"> </span><span class="nx">Ctrl</span><span class="o">+</span><span class="nx">l</span><span class="w"> </span><span class="nt">-Function</span><span class="w"> </span><span class="nx">ClearScreen</span><span class="w">
</span><span class="c">#New-Alias -Name cc -Value 'code.cmd'</span><span class="w">
</span><span class="n">New-Alias</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">ep</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="s1">'C:\Program Files\Just Great Software\EditPad Lite 8\EditPadLite8.exe'</span><span class="w">
</span><span class="n">New-Alias</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">hh</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="nx">Get-History</span><span class="w">
</span><span class="n">New-Alias</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">ll</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="nx">Get-ChildItem</span><span class="w">
</span><span class="n">New-Alias</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">n2</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="s1">'D:\ap\opt\notepad2\Notepad2.exe'</span><span class="w">
</span><span class="n">New-Alias</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">nn</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="nx">notepad.exe</span><span class="w">
</span><span class="n">New-Alias</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="nx">pp</span><span class="w"> </span><span class="nt">-Value</span><span class="w"> </span><span class="s1">'C:\Program Files\PuTTY\putty.exe'</span><span class="w">

</span><span class="c">#Save Command History</span><span class="w">
</span><span class="nv">$HistoryPath</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'C:\Users\$USER\Documents\WindowsPowerShell\History'</span><span class="w">
</span><span class="kr">If</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="s2">"</span><span class="nv">${HistoryPath}</span><span class="s2">\History.csv"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">Import-Csv</span><span class="w"> </span><span class="s2">"</span><span class="nv">${HistoryPath}</span><span class="s2">\History.csv"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-History</span><span class="w">
    </span><span class="p">}</span><span class="w">  </span><span class="kr">ElseIf</span><span class="w"> </span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$HistoryPath</span><span class="p">))</span><span class="w">  </span><span class="p">{</span><span class="w">
    </span><span class="n">New-Item</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$HistoryPath</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">Register-EngineEvent</span><span class="w"> </span><span class="nt">-SourceIdentifier</span><span class="w"> </span><span class="nx">powershell.exiting</span><span class="w"> </span><span class="nt">-SupportEvent</span><span class="w"> </span><span class="nt">-Action</span><span class="w"> </span><span class="p">{</span><span class="n">Get-History</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Select-Object</span><span class="w"> </span><span class="nt">-Last</span><span class="w"> </span><span class="nx">99999</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Export-Csv</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"</span><span class="nv">${HistoryPath}</span><span class="s2">\History.csv"</span><span class="p">}</span><span class="w">

</span></code></pre></div></div> <p>The part of save command history can make powershell having Linux history like command, very useful.</p>]]></content><author><name></name></author><category term="windows"/><category term="apan"/><category term="tech"/><summary type="html"><![CDATA[Windows powershell profile]]></summary></entry><entry><title type="html">My favirate bash profile</title><link href="https://panyu101.github.io/blog/2025/my-bash-profile/" rel="alternate" type="text/html" title="My favirate bash profile"/><published>2025-03-08T09:45:00+00:00</published><updated>2025-03-08T09:45:00+00:00</updated><id>https://panyu101.github.io/blog/2025/my-bash-profile</id><content type="html" xml:base="https://panyu101.github.io/blog/2025/my-bash-profile/"><![CDATA[<p>My favirate bash profile:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 99+</span>

<span class="c"># export PS1="\[\e[31m\][\[\e[m\]\[\e[38;5;172m\]\u\[\e[m\]@\[\e[38;5;153m\]\h\[\e[m\] \[\e[38;5;214m\]\W\[\e[m\]\[\e[31m\]]\[\e[m\]\\$ "</span>
<span class="c"># W - for current working directory</span>
<span class="nb">export </span><span class="nv">PS1</span><span class="o">=</span><span class="s2">"</span><span class="se">\[\e</span><span class="s2">[31m</span><span class="se">\]</span><span class="s2">[</span><span class="se">\[\e</span><span class="s2">[m</span><span class="se">\]\[\e</span><span class="s2">[38;5;172m</span><span class="se">\]\u\[\e</span><span class="s2">[m</span><span class="se">\]</span><span class="s2">@</span><span class="se">\[\e</span><span class="s2">[38;5;153m</span><span class="se">\]\h\[\e</span><span class="s2">[m</span><span class="se">\]</span><span class="s2"> </span><span class="se">\[\e</span><span class="s2">[38;5;214m</span><span class="se">\]\w\[\e</span><span class="s2">[m</span><span class="se">\]\[\e</span><span class="s2">[31m</span><span class="se">\]</span><span class="s2">]</span><span class="se">\[\e</span><span class="s2">[m</span><span class="se">\]\\</span><span class="nv">$ </span><span class="s2">"</span>
<span class="c"># w - for current working directory, absolute FULL path from / (root)</span>

<span class="nb">alias rm</span><span class="o">=</span><span class="s1">'rm -fv'</span> <span class="nv">ll</span><span class="o">=</span><span class="s1">'ls -al '</span> <span class="nv">gg</span><span class="o">=</span><span class="s1">'grep --color '</span> <span class="nv">hh</span><span class="o">=</span><span class="s1">'history 33'</span> <span class="nv">nn</span><span class="o">=</span><span class="s1">'nano -w '</span> <span class="nv">w</span><span class="o">=</span><span class="s1">'ps aux|grep -v grep|grep "pts/"'</span> <span class="nv">u</span><span class="o">=</span><span class="s1">'uptime'</span>

<span class="nb">export </span><span class="nv">LS_COLORS</span><span class="o">=</span><span class="k">${</span><span class="nv">LS_COLORS</span><span class="k">}</span>:<span class="s1">'zz=04;31'</span>   <span class="c"># ONLY works for ls --color, not for busybox ls.</span>
<span class="nb">export </span><span class="nv">EDITOR</span><span class="o">=</span>nano

<span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>direnv hook bash<span class="si">)</span><span class="s2">"</span>

<span class="c"># 99+.</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="bash"/><category term="apan"/><category term="tech"/><summary type="html"><![CDATA[My favirate bash profile]]></summary></entry><entry><title type="html">Git diff output</title><link href="https://panyu101.github.io/blog/2025/git-diff-output/" rel="alternate" type="text/html" title="Git diff output"/><published>2025-03-08T08:50:00+00:00</published><updated>2025-03-08T08:50:00+00:00</updated><id>https://panyu101.github.io/blog/2025/git-diff-output</id><content type="html" xml:base="https://panyu101.github.io/blog/2025/git-diff-output/"><![CDATA[<p>git diff command output is vi style by default under Alpine Linux, but you can change this:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git diff

git config <span class="nt">--global</span> <span class="nt">--get</span> core.pager
git config <span class="nt">--global</span> core.pager <span class="s2">"more"</span>

git diff
</code></pre></div></div>]]></content><author><name></name></author><category term="git"/><category term="apan"/><category term="tech"/><summary type="html"><![CDATA[git diff output]]></summary></entry><entry><title type="html">Alpine package info</title><link href="https://panyu101.github.io/blog/2025/alpine-package/" rel="alternate" type="text/html" title="Alpine package info"/><published>2025-03-08T07:45:00+00:00</published><updated>2025-03-08T07:45:00+00:00</updated><id>https://panyu101.github.io/blog/2025/alpine-package</id><content type="html" xml:base="https://panyu101.github.io/blog/2025/alpine-package/"><![CDATA[<p>Right after completion of Alpine installation, do this to save a default_packages.txt</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apk info <span class="o">&gt;</span> default_packages.txt
</code></pre></div></div> <p>After that, you may use apk add to install any package.<br/> When you want to know what packages have been installed other than these installed by default, you can do:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>apk info <span class="o">&gt;</span> installed_packages.txt
</code></pre></div></div> <p>Then compare these two files:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diff default_packages.txt installed_packages.txt
</code></pre></div></div>]]></content><author><name></name></author><category term="alpine"/><category term="apan"/><category term="tech"/><summary type="html"><![CDATA[Alpine package info]]></summary></entry><entry><title type="html">EKS service account</title><link href="https://panyu101.github.io/blog/2025/eks-service-account/" rel="alternate" type="text/html" title="EKS service account"/><published>2025-03-07T12:55:00+00:00</published><updated>2025-03-07T12:55:00+00:00</updated><id>https://panyu101.github.io/blog/2025/eks-service-account</id><content type="html" xml:base="https://panyu101.github.io/blog/2025/eks-service-account/"><![CDATA[<p>When the pod running under AWS EKS, if it needs to use the resouce at AWS, then the service account is required to set up.<br/> The following is a sample of calling the module to set this service account called “ds-kafka-consumer” up. It is usually in file: service-accounts.tf</p> <div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">module</span> <span class="s2">"eks_serviceaccount_iam_prod"</span> <span class="p">{</span>
  <span class="nx">providers</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">kubernetes</span> <span class="o">=</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nx">kubernetes-prod</span>
  <span class="p">}</span>
  <span class="nx">source</span>  <span class="o">=</span> <span class="s2">"app.terraform.io/company-profiles/eks-serviceaccount-iam/aws"</span>
  <span class="nx">version</span> <span class="o">=</span> <span class="s2">"1.1.0"</span>

  <span class="nx">cluster_name</span> <span class="o">=</span> <span class="k">module</span><span class="p">.</span><span class="nx">qubed_eks_fargate_prod</span><span class="p">.</span><span class="nx">cluster_name</span>
  <span class="nx">region</span>       <span class="o">=</span> <span class="kd">var</span><span class="p">.</span><span class="nx">region</span>
  <span class="nx">namespace</span>    <span class="o">=</span> <span class="s2">"qubed"</span>

  <span class="nx">service_account_name</span> <span class="o">=</span> <span class="s2">"ds-kafka-consumer"</span>
  <span class="nx">role_name</span>    <span class="o">=</span> <span class="s2">"ds-kafka-consumer-prod"</span>

  <span class="nx">role_policy_arns</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">policy</span> <span class="o">=</span> <span class="nx">aws_iam_policy</span><span class="p">.</span><span class="nx">invoke_lambda</span><span class="p">.</span><span class="nx">arn</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>Later, this “ds-kafka-consumer” can be used somewhere like this (in deployment.yaml file):</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">processes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">python"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">-u"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">main.py"</span><span class="pi">]</span>
    <span class="na">cpuRequest</span><span class="pi">:</span> <span class="s">2000m</span>
    <span class="na">memoryRequest</span><span class="pi">:</span> <span class="s">2096Mi</span>
    <span class="na">maxReplicas</span><span class="pi">:</span> <span class="m">8</span>
    <span class="na">minReplicas</span><span class="pi">:</span> <span class="m">2</span>
    <span class="na">targetCPUUtilizationPercentage</span><span class="pi">:</span> <span class="m">60</span>
    <span class="na">targetMemoryUtilizationPercentage</span><span class="pi">:</span> <span class="s">70</span>        
<span class="na">serviceAccountName</span><span class="pi">:</span> <span class="s">ds-kafka-consumer</span>
</code></pre></div></div> <p>The very <strong>last line</strong> uses the service account defined.</p>]]></content><author><name></name></author><category term="k8s"/><category term="apan"/><category term="tech"/><summary type="html"><![CDATA[EKS service account]]></summary></entry><entry><title type="html">helm cli env</title><link href="https://panyu101.github.io/blog/2025/helm-cli-env/" rel="alternate" type="text/html" title="helm cli env"/><published>2025-02-25T12:40:00+00:00</published><updated>2025-02-25T12:40:00+00:00</updated><id>https://panyu101.github.io/blog/2025/helm-cli-env</id><content type="html" xml:base="https://panyu101.github.io/blog/2025/helm-cli-env/"><![CDATA[<p>If needs to run helm cli based on current repo, make sure the correct EKS settings is in place</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nv">$KUBECONFIG</span>
/root/.kube/config.qubed-eks-prod

<span class="c"># otherwise, change it to the correct one:</span>
<span class="nv">KUBECONFIG</span><span class="o">=</span><span class="s1">'/root/.kube/config.busi-eks-demo'</span>

<span class="nb">echo</span> <span class="nv">$KUBECONFIG</span>
/root/.kube/config.busi-eks-demo
</code></pre></div></div> <p>You also need to source /opt/aws/EKS/busi-demo/.envrc, which has ALL EKS settings.</p>]]></content><author><name></name></author><category term="k8s"/><category term="apan"/><category term="tech"/><summary type="html"><![CDATA[helm cli environment setup]]></summary></entry><entry><title type="html">find file with Chinese name</title><link href="https://panyu101.github.io/blog/2025/find-file-with-Chinese-name/" rel="alternate" type="text/html" title="find file with Chinese name"/><published>2025-02-24T16:00:00+00:00</published><updated>2025-02-24T16:00:00+00:00</updated><id>https://panyu101.github.io/blog/2025/find-file-with-Chinese-name</id><content type="html" xml:base="https://panyu101.github.io/blog/2025/find-file-with-Chinese-name/"><![CDATA[<p>This example shows how to use envrc in an aws cli to go through all directories to run the same aws cli:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find /var/www/html/Pan/ <span class="nt">-type</span> f | <span class="nb">grep</span> <span class="nt">--color</span><span class="o">=</span>auto <span class="nt">-P</span> <span class="s1">'[^\x00-\x7F]'</span>

<span class="c"># or this one which also works under Alpine Linux</span>
find /var/www/html/Pan/ <span class="nt">-type</span> f | <span class="nb">grep</span> <span class="nt">--color</span><span class="o">=</span>auto <span class="s1">'[^ -~]'</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="linux"/><category term="apan"/><category term="tech"/><summary type="html"><![CDATA[Search and find a file with Chinese filename]]></summary></entry><entry><title type="html">know it from try</title><link href="https://panyu101.github.io/blog/2025/know-it-from-try/" rel="alternate" type="text/html" title="know it from try"/><published>2025-02-24T14:45:00+00:00</published><updated>2025-02-24T14:45:00+00:00</updated><id>https://panyu101.github.io/blog/2025/know-it-from-try</id><content type="html" xml:base="https://panyu101.github.io/blog/2025/know-it-from-try/"><![CDATA[<p><strong>_config.yml file defines lots of variables, and can be used as site.VAR</strong></p> <p>For example, these two variables</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>blog_name: Blog     <span class="c"># blog_name will be displayed in your blog page</span>
blog_description: a simple whitespace theme <span class="k">for </span>academics
</code></pre></div></div> <p>are used in file _post/blog.md as this way:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="cp">{%</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">blog_name_size</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="ow">or</span><span class="w"> </span><span class="nv">blog_description_size</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="cp">%}</span>

  &lt;div class="header-bar"&gt;
    &lt;h3&gt;<span class="cp">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">blog_name</span><span class="w"> </span><span class="cp">}}</span>&lt;/h3&gt;
    &lt;h4&gt;<span class="cp">{{</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">blog_description</span><span class="w"> </span><span class="cp">}}</span>&lt;/h4&gt;
  &lt;/div&gt;
  <span class="cp">{%</span><span class="w"> </span><span class="nt">endif</span><span class="w"> </span><span class="cp">%}</span>

</code></pre></div></div>]]></content><author><name></name></author><category term="web"/><category term="apan"/><category term="tech"/><summary type="html"><![CDATA[know this Al-Folio framwork from trying]]></summary></entry></feed>